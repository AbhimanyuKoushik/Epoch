    '''
    def _display_aux(self, node):
        """
        Returns a list of strings, a width, a height, and a horizontal coordinate of the root.
        This is a helper function for print_tree that pretty-prints the tree in a horizontal layout.
        """
        # No child.
        if node.left is None and node.right is None:
            if node.value is not None:
                line = "Leaf:" + str(node.value)
            else:
                line = f"X[{node.feature_index}]<{node.threshold:.2f}"
            width = len(line)
            height = 1
            middle = width // 2
            return [line], width, height, middle

        # Only left child.
        if node.right is None:
            lines, n, p, x = self._display_aux(node.left)
            if node.value is not None:
                s = "Leaf:" + str(node.value)
            else:
                s = f"X[{node.feature_index}]<{node.threshold:.2f}"
            u = len(s)
            first_line = (x + 1) * " " + (n - x - 1) * "_" + s
            second_line = x * " " + "/" + (n - x - 1 + u) * " "
            shifted_lines = [line + u * " " for line in lines]
            return [first_line, second_line] + shifted_lines, n + u, p + 2, n + u // 2

        # Only right child.
        if node.left is None:
            lines, n, p, x = self._display_aux(node.right)
            if node.value is not None:
                s = "Leaf:" + str(node.value)
            else:
                s = f"X[{node.feature_index}]<{node.threshold:.2f}"
            u = len(s)
            first_line = s + x * "_" + (n - x) * " "
            second_line = (u + x) * " " + "\\" + (n - x - 1) * " "
            shifted_lines = [u * " " + line for line in lines]
            return [first_line, second_line] + shifted_lines, n + u, p + 2, u // 2

        # Two children.
        left, n, p, x = self._display_aux(node.left)
        right, m, q, y = self._display_aux(node.right)
        if node.value is not None:
            s = "Leaf:" + str(node.value)
        else:
            s = f"X[{node.feature_index}]<{node.threshold:.2f}"
        u = len(s)
        first_line = (x + 1) * " " + (n - x - 1) * "_" + s + y * "_" + (m - y) * " "
        second_line = x * " " + "/" + (n - x - 1 + u + y) * " " + "\\" + (m - y - 1) * " "
        if p < q:
            left += [" " * n] * (q - p)
        elif q < p:
            right += [" " * m] * (p - q)
        zipped_lines = zip(left, right)
        lines = [first_line, second_line] + [a + u * " " + b for a, b in zipped_lines]
        return lines, n + m + u, max(p, q) + 2, n + u // 2

    def print_tree(self):
        """
        Prints the decision tree in the terminal in a horizontal layout.
        The left subtree appears on the left side and the right subtree on the right side.
        """
        lines, *_ = self._display_aux(self.root)
        for line in lines:
            print(line)
    '''